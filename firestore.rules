rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isWorkspaceMember(workspaceId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/workspaces/$(workspaceId)/members/$(request.auth.uid));
    }
    
    function isWorkspaceOwner(workspaceId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.userId == request.auth.uid;
    }

    // Users collection
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // OAuth accounts
    match /oauthAccounts/{accountId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Sessions
    match /sessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Workspaces
    match /workspaces/{workspaceId} {
      allow read, write: if isWorkspaceOwner(workspaceId);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Workspace members subcollection
      match /members/{memberId} {
        allow read, write: if isWorkspaceOwner(workspaceId);
      }
    }
    
    // Campaigns
    match /campaigns/{campaignId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Leads
    match /leads/{leadId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Analytics
    match /analytics/{analyticsId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Content
    match /content/{contentId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Social accounts
    match /socialAccounts/{accountId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // ViVi interactions
    match /viviInteractions/{interactionId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Trends (public read, admin write)
    match /trends/{trendId} {
      allow read: if true;
      allow write: if isAuthenticated() && 
        request.auth.token.admin == true;
    }
    
    // Grio modules (public read, admin write)
    match /grioModules/{moduleId} {
      allow read: if true;
      allow write: if isAuthenticated() && 
        request.auth.token.admin == true;
    }
    
    // Grio user progress
    match /grioUserProgress/{progressId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Grio user stats
    match /grioUserStats/{statsId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Grio leaderboard (public read for visible entries)
    match /grioLeaderboard/{entryId} {
      allow read: if resource.data.isVisible == true;
      allow write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
  }
}
