// Production build configuration for esbuild
// This ensures all dependencies are properly bundled for deployment

import { build } from 'esbuild';
import { readFileSync } from 'fs';

const packageJson = JSON.parse(readFileSync('./package.json', 'utf8'));

// Get all dependencies that should be bundled
const productionDependencies = Object.keys(packageJson.dependencies || {});

// Build configuration for production deployment
const buildConfig = {
  entryPoints: ['server/index.ts'],
  bundle: true,
  platform: 'node',
  target: 'node18',
  format: 'esm',
  outdir: 'dist',
  sourcemap: true,
  minify: process.env.NODE_ENV === 'production',
  
  // External packages that should not be bundled (native modules only)
  external: [
    'pg-native',
    'bufferutil',
    'utf-8-validate'
  ],
  
  // Define environment variables for the build
  define: {
    'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'production'),
  },
  
  // Banner to add at the top of the generated file
  banner: {
    js: '// Mavro OS Production Bundle\n// Generated by esbuild\n',
  },
  
  // Loader configuration for different file types
  loader: {
    '.js': 'js',
    '.ts': 'ts',
    '.json': 'json',
  },
  
  // Resolve configuration
  resolveExtensions: ['.ts', '.js', '.json'],
  
  // Log level for build output
  logLevel: 'info',
};

// Build function
async function buildProduction() {
  try {
    console.log('Building Mavro OS for production deployment...');
    console.log(`Bundling ${productionDependencies.length} dependencies`);
    
    await build(buildConfig);
    
    console.log('‚úÖ Production build completed successfully!');
    console.log('üì¶ Bundle includes all required dependencies');
    console.log('üöÄ Ready for deployment');
  } catch (error) {
    console.error('‚ùå Build failed:', error);
    process.exit(1);
  }
}

// Run build if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  buildProduction();
}

export { buildConfig, buildProduction };